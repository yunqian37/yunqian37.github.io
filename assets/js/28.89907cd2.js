(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{386:function(t,v,_){"use strict";_.r(v);var e=_(44),l=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h3",{attrs:{id:"node特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node特点"}},[t._v("#")]),t._v(" Node特点")]),t._v(" "),_("p",[t._v("Node保留了前端浏览器js中的常用接口，没有改写语言本身的任何特性，依旧基于作用域和原型链。将前端中广泛运用的思想迁移到了服务器端")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("异步I/O：在node中绝大多数的操作都以异步的方式进行调用")])]),t._v(" "),_("li",[_("p",[t._v("事件与回调函数：回调函数是最好的接受异步调用返回数据的方式")])]),t._v(" "),_("li",[_("p",[t._v("单线程：无法利用多核CPU")]),t._v(" "),_("p",[t._v("​\t\t\t\t错误会引起整个应用退出，应用的健壮性值得考验")]),t._v(" "),_("p",[t._v("​\t\t\t\t大量计算占用CPU导致无法继续调用异步I/O")])]),t._v(" "),_("li",[_("p",[t._v("跨平台")])])]),t._v(" "),_("h3",{attrs:{id:"应用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),_("ul",[_("li",[t._v("I/O密集型：Node面向网络且擅长并行I/O，能够有效的组织起更多的硬件资源，从而提供更多好的服务。I/O密集的优势主要在于Node利用事件循环的处理能力，而不是启动每一个线程为每一个请求服务，资源占用极少")]),t._v(" "),_("li",[t._v("是否不擅长CPU密集型业务：由于JS单线程的原因，如果有长时间运行的计算（比如大循环），将会导致CPU时间片不能释放，使得后续I/O无法发起。但是适当调整和分解大型运算任务为多个小任务，使得运算能够适时释放，不阻塞I/O调用的发起，这样即可同时享受到并行异步I/O的好处有能充分利用CPU")]),t._v(" "),_("li",[t._v("与遗留系统和平相处")]),t._v(" "),_("li",[t._v("分布式应用")])]),t._v(" "),_("h3",{attrs:{id:"node的使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node的使用"}},[t._v("#")]),t._v(" Node的使用")]),t._v(" "),_("ul",[_("li",[t._v("前后端编程语言环境统一")]),t._v(" "),_("li",[t._v("Node带来的高性能I/O用于实时应用")]),t._v(" "),_("li",[t._v("并行I/O是的使用者可以更高效地利用分布式环境")]),t._v(" "),_("li",[t._v("并行I/O，有效利用稳定接口提升Web渲染能力")]),t._v(" "),_("li",[t._v("云计算平台提供Node支持")]),t._v(" "),_("li",[t._v("游戏开发领域")]),t._v(" "),_("li",[t._v("工具类应用")])])])}),[],!1,null,null,null);v.default=l.exports}}]);