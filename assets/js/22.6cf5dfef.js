(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{380:function(t,r,v){"use strict";v.r(r);var _=v(44),a=Object(_.a)({},(function(){var t=this,r=t.$createElement,v=t._self._c||r;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h3",{attrs:{id:"iterator-建议看深入理解es6-迭代器和生成器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#iterator-建议看深入理解es6-迭代器和生成器"}},[t._v("#")]),t._v(" Iterator（建议看深入理解ES6 -- 迭代器和生成器）")]),t._v(" "),v("p",[v("strong",[t._v("Iterator：")]),t._v(" 为各种不同的数据结构提供统一的访问机制，任何数据结构只要部署Iterator接口就可以完成遍历操作")]),t._v(" "),v("p",[v("strong",[t._v("作用：")])]),t._v(" "),v("ul",[v("li",[t._v("为各种数据提供一个统一的、简单的访问接口")]),t._v(" "),v("li",[t._v("使得数据结构的成员能够按某种次序排列")]),t._v(" "),v("li",[t._v("Iterator接口主要供for...of消费")])]),t._v(" "),v("p",[v("strong",[t._v("遍历过程：")])]),t._v(" "),v("ul",[v("li",[t._v("创建一个指针对象，指向当前数据结构的起始位置。即：遍历器对象本质上就是一个指针对象")]),t._v(" "),v("li",[t._v("第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员")]),t._v(" "),v("li",[t._v("第二次调用指针对象的next方法，指针就指向数据结构的第二个成员")]),t._v(" "),v("li",[t._v("不断调用指针对象的next方法，知道它指向数据结构的结束位置")])]),t._v(" "),v("p",[t._v("注：每一次调用next方法都会返回一个包含value和done两个属性的对象。value：当前成员的值，done：一个布尔值表示遍历是否结束")]),t._v(" "),v("h3",{attrs:{id:"默认iterator接口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#默认iterator接口"}},[t._v("#")]),t._v(" 默认Iterator接口")]),t._v(" "),v("p",[t._v("ES6规定：默认的Iterator接口部署在数据结构的Symbol.iterator属性。即：一个数据结构只要具有Symbol.iterator数据就可以认为是“可遍历的”")]),t._v(" "),v("p",[v("strong",[t._v("原生具备Iterator接口的数据结构：")])]),t._v(" "),v("ul",[v("li",[t._v("Array")]),t._v(" "),v("li",[t._v("Map")]),t._v(" "),v("li",[t._v("Set")]),t._v(" "),v("li",[t._v("String")]),t._v(" "),v("li",[t._v("TypedArray")]),t._v(" "),v("li",[t._v("函数的arguments对象")]),t._v(" "),v("li",[t._v("NodeList对象")])]),t._v(" "),v("h3",{attrs:{id:"调用iterator接口的场合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#调用iterator接口的场合"}},[t._v("#")]),t._v(" 调用Iterator接口的场合")]),t._v(" "),v("p",[v("strong",[t._v("默认调用Iterator接口：")])]),t._v(" "),v("ul",[v("li",[t._v("解构赋值")]),t._v(" "),v("li",[t._v("扩展运算符")]),t._v(" "),v("li",[t._v("yield*")]),t._v(" "),v("li",[t._v("由于数组的遍历会调用遍历器接口，所以任何接受数组作为参数的场合都调用了遍历器接口")])]),t._v(" "),v("h3",{attrs:{id:"字符串的iterator接口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字符串的iterator接口"}},[t._v("#")]),t._v(" 字符串的Iterator接口")]),t._v(" "),v("p",[t._v("字符串是一个类似数组的对象，也原生具有Iterator接口")])])}),[],!1,null,null,null);r.default=a.exports}}]);